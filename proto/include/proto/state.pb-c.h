/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: state.proto */

#ifndef PROTOBUF_C_state_2eproto__INCLUDED
#define PROTOBUF_C_state_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _State__CodePos State__CodePos;
typedef struct _State__Array8 State__Array8;
typedef struct _State__Array32 State__Array32;
typedef struct _State__Array64 State__Array64;
typedef struct _State__TypedArray State__TypedArray;
typedef struct _State__LabelStack State__LabelStack;
typedef struct _State__CallStackEntry State__CallStackEntry;
typedef struct _State__CallStack State__CallStack;


/* --- enums --- */


/* --- messages --- */

/*
 * CodePos に対応
 */
struct  _State__CodePos
{
  ProtobufCMessage base;
  uint32_t fidx;
  uint64_t offset;
};
#define STATE__CODE_POS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state__code_pos__descriptor) \
    , 0, 0 }


/*
 * Array8 に対応
 */
struct  _State__Array8
{
  ProtobufCMessage base;
  /*
   * uint8 は bytes でもいいが、扱いやすさを優先して repeated uint32 に
   */
  ProtobufCBinaryData contents;
};
#define STATE__ARRAY8__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state__array8__descriptor) \
    , {0,NULL} }


/*
 * Array32 に対応
 */
struct  _State__Array32
{
  ProtobufCMessage base;
  size_t n_contents;
  uint32_t *contents;
};
#define STATE__ARRAY32__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state__array32__descriptor) \
    , 0,NULL }


/*
 * Array64 に対応
 */
struct  _State__Array64
{
  ProtobufCMessage base;
  size_t n_contents;
  uint64_t *contents;
};
#define STATE__ARRAY64__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state__array64__descriptor) \
    , 0,NULL }


/*
 * TypedArray に対応
 */
struct  _State__TypedArray
{
  ProtobufCMessage base;
  State__Array8 *types;
  State__Array32 *values;
};
#define STATE__TYPED_ARRAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state__typed_array__descriptor) \
    , NULL, NULL }


/*
 * LabelStack に対応
 */
struct  _State__LabelStack
{
  ProtobufCMessage base;
  size_t n_begins;
  uint32_t *begins;
  size_t n_targets;
  uint32_t *targets;
  size_t n_stack_pointers;
  uint32_t *stack_pointers;
  size_t n_cell_nums;
  uint32_t *cell_nums;
};
#define STATE__LABEL_STACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state__label_stack__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * CallStackEntry に対応
 */
struct  _State__CallStackEntry
{
  ProtobufCMessage base;
  State__CodePos *pc;
  State__TypedArray *locals;
  State__TypedArray *value_stack;
  State__LabelStack *label_stack;
};
#define STATE__CALL_STACK_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state__call_stack_entry__descriptor) \
    , NULL, NULL, NULL, NULL }


/*
 * CallStack に対応
 */
struct  _State__CallStack
{
  ProtobufCMessage base;
  size_t n_entries;
  State__CallStackEntry **entries;
};
#define STATE__CALL_STACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state__call_stack__descriptor) \
    , 0,NULL }


/* State__CodePos methods */
void   state__code_pos__init
                     (State__CodePos         *message);
size_t state__code_pos__get_packed_size
                     (const State__CodePos   *message);
size_t state__code_pos__pack
                     (const State__CodePos   *message,
                      uint8_t             *out);
size_t state__code_pos__pack_to_buffer
                     (const State__CodePos   *message,
                      ProtobufCBuffer     *buffer);
State__CodePos *
       state__code_pos__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state__code_pos__free_unpacked
                     (State__CodePos *message,
                      ProtobufCAllocator *allocator);
/* State__Array8 methods */
void   state__array8__init
                     (State__Array8         *message);
size_t state__array8__get_packed_size
                     (const State__Array8   *message);
size_t state__array8__pack
                     (const State__Array8   *message,
                      uint8_t             *out);
size_t state__array8__pack_to_buffer
                     (const State__Array8   *message,
                      ProtobufCBuffer     *buffer);
State__Array8 *
       state__array8__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state__array8__free_unpacked
                     (State__Array8 *message,
                      ProtobufCAllocator *allocator);
/* State__Array32 methods */
void   state__array32__init
                     (State__Array32         *message);
size_t state__array32__get_packed_size
                     (const State__Array32   *message);
size_t state__array32__pack
                     (const State__Array32   *message,
                      uint8_t             *out);
size_t state__array32__pack_to_buffer
                     (const State__Array32   *message,
                      ProtobufCBuffer     *buffer);
State__Array32 *
       state__array32__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state__array32__free_unpacked
                     (State__Array32 *message,
                      ProtobufCAllocator *allocator);
/* State__Array64 methods */
void   state__array64__init
                     (State__Array64         *message);
size_t state__array64__get_packed_size
                     (const State__Array64   *message);
size_t state__array64__pack
                     (const State__Array64   *message,
                      uint8_t             *out);
size_t state__array64__pack_to_buffer
                     (const State__Array64   *message,
                      ProtobufCBuffer     *buffer);
State__Array64 *
       state__array64__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state__array64__free_unpacked
                     (State__Array64 *message,
                      ProtobufCAllocator *allocator);
/* State__TypedArray methods */
void   state__typed_array__init
                     (State__TypedArray         *message);
size_t state__typed_array__get_packed_size
                     (const State__TypedArray   *message);
size_t state__typed_array__pack
                     (const State__TypedArray   *message,
                      uint8_t             *out);
size_t state__typed_array__pack_to_buffer
                     (const State__TypedArray   *message,
                      ProtobufCBuffer     *buffer);
State__TypedArray *
       state__typed_array__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state__typed_array__free_unpacked
                     (State__TypedArray *message,
                      ProtobufCAllocator *allocator);
/* State__LabelStack methods */
void   state__label_stack__init
                     (State__LabelStack         *message);
size_t state__label_stack__get_packed_size
                     (const State__LabelStack   *message);
size_t state__label_stack__pack
                     (const State__LabelStack   *message,
                      uint8_t             *out);
size_t state__label_stack__pack_to_buffer
                     (const State__LabelStack   *message,
                      ProtobufCBuffer     *buffer);
State__LabelStack *
       state__label_stack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state__label_stack__free_unpacked
                     (State__LabelStack *message,
                      ProtobufCAllocator *allocator);
/* State__CallStackEntry methods */
void   state__call_stack_entry__init
                     (State__CallStackEntry         *message);
size_t state__call_stack_entry__get_packed_size
                     (const State__CallStackEntry   *message);
size_t state__call_stack_entry__pack
                     (const State__CallStackEntry   *message,
                      uint8_t             *out);
size_t state__call_stack_entry__pack_to_buffer
                     (const State__CallStackEntry   *message,
                      ProtobufCBuffer     *buffer);
State__CallStackEntry *
       state__call_stack_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state__call_stack_entry__free_unpacked
                     (State__CallStackEntry *message,
                      ProtobufCAllocator *allocator);
/* State__CallStack methods */
void   state__call_stack__init
                     (State__CallStack         *message);
size_t state__call_stack__get_packed_size
                     (const State__CallStack   *message);
size_t state__call_stack__pack
                     (const State__CallStack   *message,
                      uint8_t             *out);
size_t state__call_stack__pack_to_buffer
                     (const State__CallStack   *message,
                      ProtobufCBuffer     *buffer);
State__CallStack *
       state__call_stack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state__call_stack__free_unpacked
                     (State__CallStack *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*State__CodePos_Closure)
                 (const State__CodePos *message,
                  void *closure_data);
typedef void (*State__Array8_Closure)
                 (const State__Array8 *message,
                  void *closure_data);
typedef void (*State__Array32_Closure)
                 (const State__Array32 *message,
                  void *closure_data);
typedef void (*State__Array64_Closure)
                 (const State__Array64 *message,
                  void *closure_data);
typedef void (*State__TypedArray_Closure)
                 (const State__TypedArray *message,
                  void *closure_data);
typedef void (*State__LabelStack_Closure)
                 (const State__LabelStack *message,
                  void *closure_data);
typedef void (*State__CallStackEntry_Closure)
                 (const State__CallStackEntry *message,
                  void *closure_data);
typedef void (*State__CallStack_Closure)
                 (const State__CallStack *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor state__code_pos__descriptor;
extern const ProtobufCMessageDescriptor state__array8__descriptor;
extern const ProtobufCMessageDescriptor state__array32__descriptor;
extern const ProtobufCMessageDescriptor state__array64__descriptor;
extern const ProtobufCMessageDescriptor state__typed_array__descriptor;
extern const ProtobufCMessageDescriptor state__label_stack__descriptor;
extern const ProtobufCMessageDescriptor state__call_stack_entry__descriptor;
extern const ProtobufCMessageDescriptor state__call_stack__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_state_2eproto__INCLUDED */
